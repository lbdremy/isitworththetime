{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["handleSelect","setState","e","data","value","useSelectField","initialValue","transform","_useState","useState","_useState2","Object","slicedToArray","useField","App","_useSelectField","_useSelectField2","timeUsefulness","setTimeUsefulness","_useSelectField3","_useSelectField4","taskFrequency","setTaskFrequency","_useSelectField5","_useSelectField6","taskDuration","setTaskDuration","time","extraTime","time8WorkingHours","react_default","a","createElement","Container","Header","as","Form","Field","Dropdown","selection","fluid","placeholder","options","text","onChange","Message","positive","humanizeDuration","info","Divider","warning","href","Image","src","size","centered","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7e1d4de.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Dropdown, Message, Container, Header, Image, Divider } from 'semantic-ui-react';\nimport humanizeDuration from 'humanize-duration';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst handleSelect = (setState) => (e, data) => {\n  setState(data.value);\n};\n\nconst useField = (initialValue, transform) => {\n  const [state, setState] = useState(initialValue);\n  return [state, transform(setState)];\n}\n\nconst useSelectField = (initialValue) => {\n  return useField(initialValue, handleSelect);\n}\n\nfunction App() {\n  const [timeUsefulness, setTimeUsefulness] = useSelectField();\n  const [taskFrequency, setTaskFrequency] = useSelectField();\n  const [taskDuration, setTaskDuration] = useSelectField();\n\n  const timeUsefulnessOptions = [\n    { text: '1 month', value: 1/12 },\n    { text: '3 months', value: 3/12 },\n    { text: '6 months', value: 0.5 },\n    { text: '1 year', value: 1 },\n    { text: '2 years', value: 2 },\n    { text: '3 years', value: 3 },\n    { text: '4 years', value: 4 },\n    { text: '5 years', value: 5 }\n  ];\n  const taskFrequencyOptions = [\n    { text: '50 times a day', value: 50 * 260 },\n    { text: '10 times a day', value: 10 * 260 },\n    { text: '5 times a day', value: 5 * 260 },\n    { text: 'daily', value: 260 },\n    { text: 'weekly', value: 52 },\n    { text: 'monthly', value: 12 },\n    { text: 'yearly', value: 1 },\n  ];\n  const taskDurationOptions = [\n    { text: '1 second', value: 1 },\n    { text: '5 second', value: 5 },\n    { text: '30 seconds', value: 30 },\n    { text: '1 minute', value: 60 },\n    { text: '5 minutes', value: 5 * 60 },\n    { text: '30 minutes', value: 30 * 60 },\n    { text: '1 hour', value: 3600 },\n    { text: '6 hour', value: 6 * 3600 }\n  ];\n\n  const time = taskDuration * taskFrequency * timeUsefulness * 1000;\n  const extraTime = time % (24 * 3600 * 1000);\n  const time8WorkingHours = ((time - extraTime) * 3) + extraTime;\n  return (\n    <Container>\n      <Header as=\"h1\">Is It Worth the Time (of your favorite developer :P)?</Header>\n      <Header as=\"h3\">This form will tell you how long you can work on automating a routine task before you're spending more time than you save.</Header>\n      <Form>\n        <Form.Field>\n          <label>How long this task will be useful?</label>\n          <Dropdown\n            selection\n            fluid\n            placeholder=\"Pick time of usefulness\"\n            options={timeUsefulnessOptions}\n            value={timeUsefulness}\n            onChange={setTimeUsefulness}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>How often do you do the task?</label>\n          <Dropdown\n            selection\n            fluid\n            placeholder=\"Pick task frequency\"\n            options={taskFrequencyOptions}\n            value={taskFrequency}\n            onChange={setTaskFrequency}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>How much time this task takes you?</label>\n          <Dropdown\n            selection\n            fluid\n            placeholder=\"Pick task duration\"\n            options={taskDurationOptions}\n            value={taskDuration}\n            onChange={setTaskDuration}\n          />\n        </Form.Field>\n        {time ?\n          (\n            <Message positive>\n              <Message.Header>You have {humanizeDuration(time)} (or {humanizeDuration(time8WorkingHours)} considering 8 hours working day) to automate this task more time is not worth it!</Message.Header>\n            </Message>\n          )\n          : (\n            <Message info>\n              <Message.Header>Fill in the form to get an anwser!</Message.Header>\n            </Message>\n          )\n        }\n      </Form>\n      <Divider/>\n      <Message warning>\n        <Message.Header>Notes:</Message.Header> 1 year is 260 working days not 365 days.\n      </Message>\n      <Divider/>\n      <Header as=\"h3\">Interactive version of the famous comic from <a href=\"https://xkcd.com/1205/\">xkcd</a> :D</Header>\n      <Image src=\"https://imgs.xkcd.com/comics/is_it_worth_the_time.png\" size=\"large\" centered/>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}